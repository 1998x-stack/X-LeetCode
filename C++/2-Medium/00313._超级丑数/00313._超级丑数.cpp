
#include <iostream>
#include <vector>
#include <queue>
#include <utility>
using namespace std;

// Function to find the nth super ugly number
int nthSuperUglyNumber(int n, vector<int>& primes) {
    vector<long long> ugly(n, 0);
    ugly[0] = 1;
    priority_queue<pair<long long, int>, vector<pair<long long, int>>, greater<pair<long long, int>>> pq;
    
    // Initialize the priority queue with the first ugly number multiplied by each prime
    for (int prime : primes) {
        pq.push({prime, prime});
    }
    
    for (int i = 1; i < n; ++i) {
        // Get the smallest number from the priority queue
        auto [num, prime] = pq.top();
        pq.pop();
        
        // Avoid duplicates
        if (num != ugly[i-1]) {
            ugly[i] = num;
        } else {
            i--; // Compensate for the duplicate element
        }
        
        // Push the next potential ugly number generated by this prime
        pq.push({num * prime, prime});
    }
    
    return ugly[n-1];
}

int main() {
    vector<int> primes = {2, 7, 13, 19}; // Example primes
    int n = 12; // Example n
    cout << "The " << n << "th super ugly number is: " << nthSuperUglyNumber(n, primes) << endl;
    return 0;
}